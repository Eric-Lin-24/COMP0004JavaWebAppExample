/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/11.0.4
 * Generated at: 2025-03-07 15:23:00 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import java.util.List;

public final class patientList_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(2);
    _jspx_imports_classes.add("java.util.List");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("  ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "/meta.jsp", out, false);
      out.write("\r\n");
      out.write("  <title>NOTED</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "/header.jsp", out, false);
      out.write("\r\n");
      out.write("<div class=\"main\">\r\n");
      out.write("  <h2>Notes:</h2>\r\n");
      out.write("  <div>\r\n");
      out.write("    <label for=\"sortOptions\">Sort by:</label>\r\n");
      out.write("    <select id=\"sortOptions\" onchange=\"sortNotes()\">\r\n");
      out.write("      <option value=\"alphabetical\">Alphabetical</option>\r\n");
      out.write("      <option value=\"timeMade\">Time Made</option>\r\n");
      out.write("    </select>\r\n");
      out.write("  </div>\r\n");
      out.write("  <ul id=\"noteList\">\r\n");
      out.write("    ");

      List<String> names = (List<String>) request.getAttribute("noteNames");
      for (String name : names) {
        String href = "dummypage.html?file=" + name + ".txt";
    
      out.write("\r\n");
      out.write("    <li id=\"");
      out.print(name);
      out.write("\">\r\n");
      out.write("      <a href=\"");
      out.print(href);
      out.write('"');
      out.write('>');
      out.print(name);
      out.write("</a>\r\n");
      out.write("      <button onclick=\"removeNote('");
      out.print(name);
      out.write("')\">Remove</button>\r\n");
      out.write("    </li>\r\n");
      out.write("    ");
 } 
      out.write("\r\n");
      out.write("  </ul>\r\n");
      out.write("\r\n");
      out.write("  <h3>Create a New Note</h3>\r\n");
      out.write("  <form id=\"createNoteForm\">\r\n");
      out.write("    <label for=\"noteName\">Note Name:</label>\r\n");
      out.write("    <input type=\"text\" id=\"noteName\" name=\"noteName\" required>\r\n");
      out.write("    <button type=\"submit\">Create Note</button>\r\n");
      out.write("  </form>\r\n");
      out.write("</div>\r\n");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "/footer.jsp", out, false);
      out.write("\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("  document.getElementById('createNoteForm').addEventListener('submit', function(event) {\r\n");
      out.write("    event.preventDefault();\r\n");
      out.write("    var noteName = document.getElementById('noteName').value.trim();\r\n");
      out.write("    if (noteName) {\r\n");
      out.write("      fetch('/createNote', {\r\n");
      out.write("        method: 'POST',\r\n");
      out.write("        headers: { 'Content-Type': 'application/json' },\r\n");
      out.write("        body: JSON.stringify({ noteName: noteName })\r\n");
      out.write("      }).then(response => response.text())\r\n");
      out.write("        .then(result => {\r\n");
      out.write("          alert(result);\r\n");
      out.write("          if (result === \"Note created successfully.\") {\r\n");
      out.write("            var noteList = document.getElementById('noteList');\r\n");
      out.write("            var listItem = document.createElement('li');\r\n");
      out.write("            listItem.id = noteName;\r\n");
      out.write("            var link = document.createElement('a');\r\n");
      out.write("            link.href = 'dummypage.html?file=' + noteName + '.txt';\r\n");
      out.write("            link.textContent = noteName;\r\n");
      out.write("            var removeButton = document.createElement('button');\r\n");
      out.write("            removeButton.textContent = 'Remove';\r\n");
      out.write("            removeButton.onclick = function() { removeNote(noteName); };\r\n");
      out.write("            listItem.appendChild(link);\r\n");
      out.write("            listItem.appendChild(removeButton);\r\n");
      out.write("            noteList.appendChild(listItem);\r\n");
      out.write("            document.getElementById('noteName').value = ''; // Clear the input field\r\n");
      out.write("          }\r\n");
      out.write("        })\r\n");
      out.write("        .catch(error => {\r\n");
      out.write("          console.error('Error creating note:', error);\r\n");
      out.write("          alert('Error creating note: ' + error);\r\n");
      out.write("        });\r\n");
      out.write("    } else {\r\n");
      out.write("      alert('Please enter a note name.');\r\n");
      out.write("    }\r\n");
      out.write("  });\r\n");
      out.write("\r\n");
      out.write("  function removeNote(noteName) {\r\n");
      out.write("    fetch('/removeNote', {\r\n");
      out.write("      method: 'POST',\r\n");
      out.write("      headers: { 'Content-Type': 'application/json' },\r\n");
      out.write("      body: JSON.stringify({ noteName: noteName })\r\n");
      out.write("    }).then(response => response.text())\r\n");
      out.write("      .then(result => {\r\n");
      out.write("        alert(result);\r\n");
      out.write("        if (result === \"Note removed successfully.\") {\r\n");
      out.write("          var noteList = document.getElementById('noteList');\r\n");
      out.write("          var listItem = document.getElementById(noteName);\r\n");
      out.write("          noteList.removeChild(listItem);\r\n");
      out.write("        }\r\n");
      out.write("      })\r\n");
      out.write("      .catch(error => {\r\n");
      out.write("        console.error('Error removing note:', error);\r\n");
      out.write("        alert('Error removing note: ' + error);\r\n");
      out.write("      });\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  function sortNotes() {\r\n");
      out.write("    var sortOption = document.getElementById('sortOptions').value;\r\n");
      out.write("    window.location.href = '/patientList.html?sort=' + sortOption;\r\n");
      out.write("  }\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
